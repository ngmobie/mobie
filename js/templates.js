angular.module("docsApp").run(["$templateCache", function($templateCache) {$templateCache.put("api-index.html","<h2>Welcome</h2>\n\n<p>Welcome to the Mobie API reference, feel free to update our docs and send us pull requests to help to improve our documentation</p>");
$templateCache.put("api.html","<div class=\"container\">\n	<div class=\"row\">\n		<div class=\"col-md-3 col-xs-12 column-left\" ng-controller=\"LeftbarController as leftbarCtrl\">\n			<div ng-repeat=\"(key, value) in pages track by $index\">\n				<h3>{{ key }}</h3>\n				\n				<div ng-repeat=\"(key, value) in value track by $index\">\n					<h4>{{ key }}</h4>\n\n					<div ng-repeat=\"(key, value) in value track by $index\">\n						<h5>{{ key }}</h5>\n\n						<ul>\n							<li ng-repeat=\"item in value\">\n								<a mb-sref=\"item.stateName\">{{ item.name }}</a>\n							</li>\n						</ul>\n					</div>\n				</div>\n			</div>\n		</div>\n		<div class=\"col-md-9 col-xs-12\" ui-view></div>\n	</div>\n</div>");
$templateCache.put("app-index.html","<div class=\"container\">\n	<div class=\"row\">\n		<div class=\"col-md-12\" ng-bind-html=\"readmeContent\"></div>\n	</div>\n</div>");
$templateCache.put("best-practices.html","<div class=\"container\">\n	<div class=\"row\">\n		<div class=\"col-md-12\">\n			<h3>Best practices</h3>\n\n			<h4>Application structure</h4>\n\n			<p>Before you say anything, you must know that structure your application in a good way it\'s important, so, below you will see some documentation about good practices while structuring your mobile application. Do not forget, it is VERY IMPORTANT to structure your mobile application well too!</p>\n\n			<ul>\n				<li>\n					<a href=\"http://google.github.io/styleguide/angularjs-google-style.html\">An AngularJS Style Guide for Closure Users at Google</a>\n				</li>\n				<li>\n					<a href=\"https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub\">Best Practice Recommendations for Angular App Structure</a>\n				</li>\n			</ul>\n		</div>\n	</div>\n</div>");
$templateCache.put("examples.html","<div class=\"container\" mb-affix data-base-path=\"examples/\">\n	<div class=\"row\">\n		<div mb-affix-column class=\"col-md-2 mb-affix-column hidden-xs\">\n			<ul>\n				<li\n					ng-repeat=\"item in items track by $index\"\n					mb-affix-parent=\"item.link\"\n				>\n					<a mb-affix-href=\"{{ item.link }}\">{{ item.name }}</a>\n					<ul>\n						<li ng-repeat=\"subitem in item.subitems track by $index\">\n							<a mb-affix-href=\"{{ subitem.link }}\">{{ subitem.name }}</a>\n						</li>\n					</ul>\n				</li>\n			</ul>\n		</div>\n		<div class=\"col-md-6 affix-contents col-xs-12\">\n			<section\n				ng-repeat-start=\"item in items track by $index\"\n				ng-include=\"item.templateUrl\"\n				mb-affix-content\n				mb-has-example=\"item.example\"\n				mb-affix-id=\"item.link\"\n				id=\"{{ item.link }}\"\n				class=\"affix-content-section\"\n			>\n			</section>\n			<section\n				ng-repeat-end\n				ng-repeat=\"subitem in item.subitems track by $index\"\n				ng-include=\"subitem.templateUrl\"\n				mb-affix-content\n				mb-has-example=\"subitem.example\"\n				mb-affix-id=\"subitem.link\"\n				id=\"{{ subitem.link }}\"\n				class=\"affix-content-section\"\n			></section>\n		</div>\n		<div class=\"col-md-4 mb-affix-right-column hidden-xs\" mb-affix-mobile-template mb-device-preview></div>\n	</div>\n</div>");
$templateCache.put("footer-template.html","<div class=\"footer\"></div>");
$templateCache.put("highlight.html","<div class=\"highlight mb-highlight\" ng-transclude></div>");
$templateCache.put("mobile-example.html","<div class=\"container\">\n	<div class=\"row\">\n		<div class=\"col-md-8\">\n			<h1>Example</h1>\n		</div>\n\n		<div class=\"col-md-4 col-xs-12\">\n			<iframe src=\"http://ngmobie.github.io/mobie-demo\" width=\"100%\" height=\"568\" class=\"iframe-mobile-example\"></iframe>\n		</div>\n	</div>\n</div>");
$templateCache.put("examples/brand-colors.html","<h3>Brand colors</h3>\n\n<p>Any component (such as <a mb-affix-href=\"range\">Range</a>, <a mb-affix-href=\"list\">List</a> etc.) can be styled with the 4 standard brand colors available by default in Mobie. Which is:</p>\n\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Brand color</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        Primary\n      </td>\n      <td>\n        <button class=\"btn btn-primary\">\n          #387ef5\n        </button>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        Success\n      </td>\n      <td>\n        <button class=\"btn btn-success\">\n          #33cd5f\n        </button>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        Danger\n      </td>\n      <td>\n        <button class=\"btn btn-danger\">\n          #ef473a\n        </button>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        Info\n      </td>\n      <td>\n        <button class=\"btn btn-info\" ng-style=\"{ \'background-color\': \'#ffc900\', \'border-color\': \'#ffc900\' }\">\n          #ffc900\n        </button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>All you have to do is join the <code>name of the component</code>-<code>brand color</code>, so if I want to hit the <code>primary</code> brand color of the <code>bar</code> component, the final name of the extending class will be <code>bar-primary</code>, since you will always use the main class, all you wanna do is add the class <code>bar-primary</code> to your <code>class</code> attribute. And of course, it\'s the same for all components and brand colors.</p>\n\n<h4>In action</h4>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"bar bar-header\">\n  <h3>Brand default</h3>\n</div>\n<div class=\"bar bar-primary bar-header\">\n  <h3>Brand primary</h3>\n</div>\n<div class=\"bar bar-header brand-success\">\n  <h3>Brand success</h3>\n</div>\n<div class=\"bar bar-header brand-danger\">\n  <h3>Brand danger</h3>\n</div>\n<div class=\"bar bar-header brand-info\">\n  <h3>Brand info</h3>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-block.html","<h3>Block Buttons</h3>\n\n<p>Adding <code>button-block</code> to a button applies <code>display: block</code> display. A block button will however go 100% of its parent\'s width. In the example, the button\'s containing content element also has <code>padding</code> applied, so there is some breathing room between the edge of the device and the buttons.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<button class=\"button button-block button-primary\">\n  Block Button\n</button>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-button-bar.html","<h3>Button Bar</h3>\n\n<p>Buttons can also be easily grouped together using the <code>button-bar</code> classname. In this example, a button bar was added to the default header bar, as well as in the main content area of the screen.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"button-bar\">\n  <a class=\"button\">First</a>\n  <a class=\"button\">Second</a>\n  <a class=\"button\">Third</a>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-clear-buttons-headers.html","<h3>Clear Buttons in Headers</h3>\n\n<p>For a more minimal approach to header buttons, simply add the <code>button-clear</code> classname to remove the background button color and border.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"bar bar-header\">\n  <button class=\"button button-icon icon ion-navicon\"></button>\n  <div class=\"h1 title\">Header Buttons</div>\n  <button class=\"button button-clear button-positive\">Edit</button>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-clear.html","<p>Add <code>button-clear</code> to remove the border and make the text stand out.</p>\n\n<p><b>Note:</b> The text will take the color of the applied button style, meaning <code>button-success</code> will result in green text and no border instead of a green background.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<button class=\"button button-clear button-success\">\n  Clear Button\n</button>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-full.html","<h3>Full Width Buttons</h3>\n\n<p>Adding <code>button-full</code> class to a button not only applies <code>display: block</code>, but also removes borders on the left and right, and any border-radius which may be applied. This style is useful when the button should stretch across the entire width of the display. Additionally, the button\'s parent element does not have <code>padding</code> applied.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<button class=\"button button-full button-danger\">\n  Full Width Block Button\n</button>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-headers-footers.html","<h3>Buttons in Headers (or Footers)</h3>\n\n<p>When buttons are placed in headers or footers, they take the style of the bar by default, so you don\'t have to use the extra style classes. To change this, add the desired style class.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"bar bar-header\">\n  <button class=\"button icon ion-navicon\"></button>\n  <h1 class=\"title\">Header Buttons</h1>\n  <button class=\"button\">Edit</button>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-icons.html","<h3>Icon Buttons</h3>\n\n<p>Icons can easily be added to any button by using any custom font-pack you choose.</p>\n\n<p>Icons can also be set with a child element inside the button, however, assigning the icon directly to the button reduces the number of elements in the DOM.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<button class=\"button\">\n  <i class=\"icon ion-loading-c\"></i> Loading...\n</button>\n\n<button class=\"button icon-left ion-home\">Home</button>\n\n<button class=\"button icon-left ion-star button-positive\">Favorites</button>\n\n<a class=\"button icon-right ion-chevron-right button-primary\">Learn More</a>\n\n<a class=\"button icon-left ion-chevron-left button-clear\">Back</a>\n\n<button class=\"button icon ion-gear-a\"></button>\n\n<a class=\"button button-icon icon ion-settings\"></a>\n\n<a class=\"button button-outline icon-right ion-navicon button-info\">Reorder</a>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-outlined.html","<h3>Outlined Buttons</h3>\n\n<p>Use button-outline to apply an outline button style, which also has a transparent background.</p>\n\n<p><b>Note:</b> The text and border will take the color of the applied button style, meaning <code>button-primary</code> will result in blue text and border, with a transparent background.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<button class=\"button button-outline button-primary\">\n  Outlined Button\n</button>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons-sizes.html","<h3>Different Sizes</h3>\n\n<p>Adding <code>button-large</code> to a button makes it larger, adding <code>button-small</code> makes it smaller.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<button class=\"button button-small button-info\">\n  Small Button\n</button>\n<button class=\"button button-large button-primary\">\n  Large Button\n</button>\n</code></pre></mb-highlight>");
$templateCache.put("examples/buttons.html","<h3>Buttons</h3>\n\n<p>By default a button has <code>display: inline-block</code> applied. Other options include <code>block</code> buttons for a full width.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<button class=\"button\">\n  Default\n</button>\n<button class=\"button button-primary\">\n  Primary\n</button>\n<button class=\"button button-success\">\n  Success\n</button>\n<button class=\"button button-danger\">\n  Danger\n</button>\n<button class=\"button button-info\">\n  Info\n</button>\n</code></pre></mb-highlight>");
$templateCache.put("examples/card-lists.html","<h3>Card Lists</h3>\n\n<p>Use the <code>list card</code> classname to create a card with lists.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list card\">\n  <a class=\"item item-icon-left\">\n    <i class=\"icon ion-home\"></i>\n    Enter home address\n  </a>\n\n  <a class=\"item item-icon-left\">\n    <i class=\"icon ion-ios-telephone\"></i>\n    Enter phone number\n  </a>\n\n  <a class=\"item item-icon-left\">\n    <i class=\"icon ion-wifi\"></i>\n    Enter wireless password\n  </a>\n\n  <a class=\"item item-icon-left\">\n    <i class=\"icon ion-card\"></i>\n    Enter card information\n  </a>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/cards-headers-footers.html","<h3>Card Headers and Footers</h3>\n\n<p>Cards can be customized similarly to how you would fill a normal screen. For example, a card can easily have Headers and Footers placed inside of them. Add the <code>item-divider</code> classname above or below the content within the <code>card</code> element.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"card\">\n  <div class=\"item item-divider\">\n    I\'m a Header in a Card!\n  </div>\n  <div class=\"item item-text-wrap\">\n    This is a basic Card with some text.\n  </div>\n  <div class=\"item item-divider\">\n    I\'m a Footer in a Card!\n  </div>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/cards-images.html","<h3>Cards Images</h3>\n\n<p>Images look great in cards, and can be combined with lists and other elements.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list card\">\n  <div class=\"item item-avatar\">\n    <img src=\"avatar.jpg\">\n    <h2>Pretty Hate Machine</h2>\n    <p>Nine Inch Nails</p>\n  </div>\n\n  <div class=\"item item-image\">\n    <img src=\"cover.jpg\">\n  </div>\n\n  <a class=\"item item-icon-left assertive\" href=\"#\">\n    <i class=\"icon ion-music-note\"></i>\n    Start listening\n  </a>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/cards.html","<h3>Cards</h3>\n\n<p>Cards have become widely used in recent years. They\'re are a great way to contain and organize information, while also setting up predictable expectations for the user. With so much content to display at once, and often so little screen realestate, cards have fast become the design pattern of choice for many companies, including the likes of Google, Twitter, and Spotify..</p>\n\n<p>For mobile experiences, Cards make it easy to display the same information visually across many different screen sizes. They allow for more control, are flexible, and can even be animated. Cards are usually placed on top of one another, but they can also be used like a \"page\" and swiped between, left and right.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"card\">\n  <div class=\"item item-text-wrap\">\n    This is a basic Card which contains an item that has wrapping text.\n  </div>\n</div>\n</code></pre></mb-highlight>\n\n<p>Cards add a box-shadow by default, whereas it\'s cousin list list-inset does not. For performance reasons, when scrolling a large card with many items its recommended to use inset lists instead.</p>");
$templateCache.put("examples/checkbox.html","<h3>Checkbox</h3>\n\n<p>A checkbox is no different than the HTML checkbox input, except it\'s styled differently. This is an example of multiple checkboxes within a list. Note the item-checkbox class was added along side item for each item.</p>\n\n<p>We prefers to use the &lt;label&gt; element for a checkbox item in order to make the entire checkbox tappable.</p>\n\n<p>Checkboxes can also have colors assigned to them, such as checkbox-assertive to assign the assertive color.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<ul class=\"list\">\n  <li class=\"item item-checkbox\">\n     <label class=\"checkbox\">\n       <input type=\"checkbox\">\n     </label>\n     Flux Capacitor\n  </li>\n  ...\n</ul>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-bar-inputs.html","<h3>Header Inputs</h3>\n\n<p>Inputs can also be placed in headers, along with buttons to submit or cancel the form.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"bar bar-header item-input-inset\">\n  <label class=\"item-input-wrapper\">\n    <i class=\"icon ion-ios-search placeholder-icon\"></i>\n    <input type=\"search\" placeholder=\"Search\">\n  </label>\n  <button class=\"button button-clear\">\n    Cancel\n  </button>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-floating-labels.html","<h3>Floating Labels</h3>\n\n<p>Floating labels are just like Stacked Labels, except that their labels animate, or \"float\" up when text is entered in the input. Each item should have <code>item-floating-label</code> assigned, and the input\'s label should have <code>input-label</code> assigned.</p>\n\n<p>Enter text in the example to the right to see the floating labels in action. This example also uses the <code>placeholder</code> attribute so user\'s have a hint of what type of text the input is looking for.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <label class=\"item item-input item-floating-label\">\n    <span class=\"input-label\">First Name</span>\n    <input type=\"text\" placeholder=\"First Name\">\n  </label>\n  <label class=\"item item-input item-floating-label\">\n    <span class=\"input-label\">Last Name</span>\n    <input type=\"text\" placeholder=\"Last Name\">\n  </label>\n  <label class=\"item item-input item-floating-label\">\n    <span class=\"input-label\">Email</span>\n    <input type=\"text\" placeholder=\"Email\">\n  </label>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-inline-labels.html","<h3>Text Input: Inline Labels</h3>\n\n<p>Use <code>input-label</code> to place a label to the left of the input element. When the user enters text the label does not hide. Note that there\'s nothing stopping you from also using a <code>placeholder</code> label too.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <label class=\"item item-input\">\n    <span class=\"input-label\">Username</span>\n    <input type=\"text\">\n  </label>\n  <label class=\"item item-input\">\n    <span class=\"input-label\">Password</span>\n    <input type=\"password\">\n  </label>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-input-icons.html","<h3>Input Icons</h3>\n\n<p>Icons can be easily added to the left of an <code>item-input</code> input. Simply add an <code>icon</code> before the <code>&lt;input&gt;</code>. By default the icon will take the color of label text. However, you can also use add <code>placeholder-icon</code> to give it a placeholder color.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list list-inset\">\n  <label class=\"item item-input\">\n    <i class=\"icon ion-search placeholder-icon\"></i>\n    <input type=\"text\" placeholder=\"Search\">\n  </label>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-inset-inputs.html","<h3>Inset Inputs</h3>\n\n<p>Using <code>list-inset</code> will inset the entire list, whereas placing <code>item-input-inset</code> will inset an input into an individual list item. Placing a button inside the item</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <div class=\"item item-input-inset\">\n    <label class=\"item-input-wrapper\">\n      <input type=\"text\" placeholder=\"Email\">\n    </label>\n    <button class=\"button button-small\">\n      Submit\n    </button>\n  </div>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-insets.html","<h3>Inset Forms</h3>\n\n<p>By default each input item will fill 100% of the width of its parent element (the list). However, you can inset the list using either the <code>list</code> <code>list-inset</code> or card classnames. The <a mb-affix-href=\"cards\">card</a> classname applies a lower box shadow while <code>list-inset</code> does not. Additionally, if the list\'s parent element has padding assigned then this will also give the form an inset appearance.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list list-inset\">\n  <label class=\"item item-input\">\n    <input type=\"text\" placeholder=\"First Name\">\n  </label>\n  <label class=\"item item-input\">\n    <input type=\"text\" placeholder=\"Last Name\">\n  </label>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-placeholder-labels.html","<h3>Text Input: Placeholder Labels</h3>\n\n<p>In the example, it\'ll default to 100% width (no borders on the left and right), and uses the <code>placeholder</code> attribute to simulate the input\'s label. Then the user begins to enter text into the input the placeholder label will be hidden. Notice how <code>&lt;textarea&gt;</code> can also be used as a multi-line text input.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <label class=\"item item-input\">\n    <input type=\"text\" placeholder=\"First Name\">\n  </label>\n  <label class=\"item item-input\">\n    <input type=\"text\" placeholder=\"Last Name\">\n  </label>\n  <label class=\"item item-input\">\n    <textarea placeholder=\"Comments\"></textarea>\n  </label>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms-stacked-labels.html","<h3>Text Input: Stacked Labels</h3>\n\n<p>Stacked labels always places the label on top of the input. Each item should have <code>item-stacked-label</code> assigned, and the input\'s label should have <code>input-label</code> assigned. This example also uses the <code>placeholder</code> attribute so users have a hint of what type of text the input is looking for.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <label class=\"item item-input item-stacked-label\">\n    <span class=\"input-label\">First Name</span>\n    <input type=\"text\" placeholder=\"Victor\">\n  </label>\n  <label class=\"item item-input item-stacked-label\">\n    <span class=\"input-label\">Last Name</span>\n    <input type=\"text\" placeholder=\"Queiroz\">\n  </label>\n  <label class=\"item item-input item-stacked-label\">\n    <span class=\"input-label\">Email</span>\n    <input type=\"text\" placeholder=\"personal@something.com\">\n  </label>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/forms.html","<h3>Forms</h3>\n\n<p>A list is also used to group related input elements. Both item-input and item is then used to designate each individual input field and it\'s associated label.</p>\n\n<p>We prefers to create the <code>item-input</code> out of the <code>&lt;label&gt;</code> element so that when any part of the row is tapped then the underlying input receives focus.</p>\n\n<p>Additionally, developers should be aware of the various HTML5 Input types so users will be presented with the appropriate virtual keyboard.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <label class=\"item item-input\">\n    <input type=\"text\" placeholder=\"First name\">\n  </label>\n  <label class=\"item item-input\">\n    <input type=\"text\" placeholder=\"Last name\">\n  </label>\n  <div class=\"item\">\n    <button class=\"button button-block\">Send</button>\n  </div>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/introduction.html","<h3>Introduction</h3>\n\n<p>All the documentation here are all based in <a href=\"http://ionicframework.com/docs/\">Ionic Framework Documentation</a>, some components explanation and examples are copied from there, for it\'s almost the same.</p>");
$templateCache.put("examples/list-divider.html","<h3>List Dividers</h3>\n\n<p>List items can also be dividers to organize and group the list items. Use the <code>item-divider</code> class to create a divider for any child element of the list. By default list item dividers will have a different background color and font-weight, but this is easily customizable.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <div class=\"item item-divider\">\n    Candy Bars\n  </div>\n\n  <a class=\"item\" href=\"#\">\n    Butterfinger\n  </a>\n  ...\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/list.html","<h3>List</h3>\n\n<p>The List is a common and simple way of displaying... that\'s right, a list. This is a widely used interface across most current mobile OS\'s, and can include content ranging from basic text all the way to buttons, toggles, icons, and thumbnails.</p>\n\n<p>The list view is a very versatile and powerful component. List views support various interaction modes such as editing, swipe to edit, drag to reorder, and pull to refresh.</p>\n\n<p>For more power you can use Mobie\'s directives. Check out the <a href=\"https://angularjs.org\">AngularJS list docs</a> to get more detailed information.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<ul class=\"list\">\n  <li class=\"item\">\n    ...\n  </li>\n</ul>\n</code></pre></mb-highlight>");
$templateCache.put("examples/radio.html","<h3>Radio Inputs</h3>\n\n<p>Radio buttons act no differently as standard radio input elements. Following this convention will display a list of radio buttons similarly seen in modern app.</p>\n\n<p>Each <code>item-radio</code> must have a radio input with the same input <code>name</code> attribute. The <code>radio-icon</code> class is used to designate when to show and hide the icon element.</p>\n\n<p>We prefers to use the <code>&lt;label&gt;</code> element for a radio item in order to make the entire area tappable. <b>If you use another element, it may not work properly</b>.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <label class=\"item item-radio\">\n    <input type=\"radio\" name=\"group\">\n    <div class=\"item-content\">\n      Go\n    </div>\n    <i class=\"radio-icon ion-checkmark\"></i>\n  </label>\n  ...\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/range.html","<h3>Range</h3>\n\n<p>This is a Range. Ranges can be themed to any default brand color, and used in various other elements such as a list item or card.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"item range\">\n  <i class=\"icon ion-volume-low\"></i>\n  <input type=\"range\" name=\"volume\">\n  <i class=\"icon ion-volume-high\"></i>\n</div>\n\n<div class=\"list\">\n  <div class=\"item range range-positive\">\n    <i class=\"icon ion-ios-sunny-outline\"></i>\n    <input type=\"range\" name=\"volume\" min=\"0\" max=\"100\" value=\"33\">\n    <i class=\"icon ion-ios-sunny\"></i>\n  </div>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/select.html","<h3>Select</h3>\n\n<p><code>&lt;select&gt;</code> element is styled so its appearance is prettied up relative to the browser\'s default style. However, when the select elements is opened, the default behavior on how to select one of the options is still managed by the browser.</p>\n\n<p>Each platform\'s user-interface will be different as the user is selecting an option. For example, on a desktop browser you\'ll see the traditional drop down interface, whereas Android often has a radio-button list popup, and iOS has a custom scroller covering the bottom half of the window.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"list\">\n  <label class=\"item item-input item-select\">\n    <div class=\"input-label\">\n      Lightsaber\n    </div>\n    <select>\n      <option>Blue</option>\n      <option selected>Green</option>\n      <option>Red</option>\n    </select>\n  </label>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/tabs-icon-left.html","<h3>Left Icon Tabs</h3>\n\n<p>Add <code>tabs-icon-left</code> along with the <code>tabs</code> classname.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"tabs tabs-icon-left\">\n  <a class=\"tab-item\">\n    <i class=\"icon ion-home\"></i>\n    Home\n  </a>\n  <a class=\"tab-item\">\n    <i class=\"icon ion-star\"></i>\n    Favorites\n  </a>\n  <a class=\"tab-item\">\n    <i class=\"icon ion-gear-a\"></i>\n    Settings\n  </a>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/tabs-icon-only.html","<h3>Icon-only Tabs</h3>\n\n<p>Add <code>tabs-icon-only</code> along with the <code>tabs</code> classname.</p>\n\n<p>In action:</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n	<div class=\"tabs tabs-icon-only\"></div>\n</code></pre></mb-highlight>\n\n<p>Or, if you use <a href=\"http://jade-lang.com\">Jade</a> (which is nice, btw):</p>\n\n<mb-highlight language=\"jade\">\n.tabs.tabs-icon-only\n</code></pre></mb-highlight>\n\n");
$templateCache.put("examples/tabs-icon-top.html","<h3>Top Icon Tabs</h3>\n\n<p>Classic tabs. Add <code>tabs-icon-top</code> along with the <code>tabs</code> classname.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"tabs tabs-icon-top\">\n  <a class=\"tab-item\">\n    <i class=\"icon ion-home\"></i>\n    Home\n  </a>\n  <a class=\"tab-item\">\n    <i class=\"icon ion-star\"></i>\n    Favorites\n  </a>\n  <a class=\"tab-item\">\n    <i class=\"icon ion-gear-a\"></i>\n    Settings\n  </a>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/tabs-striped-style.html","<h3>Striped Style</h3>\n\nAdd <code>tabs-striped</code> to an element above the <code>tabs</code> classname for Android style tabs.\n\nOptionally, also add <code>tabs-top</code> to position the tab at the top\n\nGet granular color control for striped tabs with the <code>tabs-background-{color}</code> and <code>tabs-color-{color}</code> classes, where <code>{color}</code> is any of the ionic color swatches: <code>default</code>, <code>danger</code>, <code>info</code>, <code>success</code>, <code>primary</code>\n\nNote, that to have the header blend with the top tabs, add the <code>has-tabs-top</code> class to the header.\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"tabs-striped tabs-top tabs-background-primary tabs-color-default\">\n  <div class=\"tabs\">\n    <a class=\"tab-item active\" href=\"#\">\n      <i class=\"icon ion-home\"></i>\n      Test\n    </a>\n    <a class=\"tab-item\" href=\"#\">\n      <i class=\"icon ion-star\"></i>\n      Favorites\n    </a>\n    <a class=\"tab-item\" href=\"#\">\n      <i class=\"icon ion-gear-a\"></i>\n      Settings\n    </a>\n  </div>\n</div>\n<div class=\"tabs-striped tabs-color-default\">\n  <div class=\"tabs\">\n    <a class=\"tab-item active\" href=\"#\">\n      <i class=\"icon ion-home\"></i>\n      Test\n    </a>\n    <a class=\"tab-item\" href=\"#\">\n      <i class=\"icon ion-star\"></i>\n      Favorites\n    </a>\n    <a class=\"tab-item\" href=\"#\">\n      <i class=\"icon ion-gear-a\"></i>\n      Settings\n    </a>\n  </div>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/tabs.html","<h3>Tabs</h3>\n\n<p>Tabs are a horizontal region of buttons or links that allow for a consistent navigation experience between screens. It can contain any combination of text and icons, and is a popular method for enabling mobile navigation.</p>\n\n<p>The containing element should have the <code>tabs</code> classname, and each tab should have the <code>tab-item</code> classname. By default, tabs will be without an icon and text-only.</p>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<div class=\"tabs\">\n  <a class=\"tab-item\">\n    Home\n  </a>\n  <a class=\"tab-item\">\n    Favorites\n  </a>\n  <a class=\"tab-item\">\n    Settings\n  </a>\n</div>\n</code></pre></mb-highlight>");
$templateCache.put("examples/typography.html","<h3>Typography</h3>\n\n<mb-highlight mb-highlight-no-strip=\"true\" language=\"html\"><pre><code>\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n<p>This is a paragraphy</p>\n</code></pre></mb-highlight>");}]);